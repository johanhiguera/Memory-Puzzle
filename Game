#include <curses.h>
#include <stdio.h>
#include <random>

struct pos {
  int x;
  int y;
};

enum colors {
  color_card=1, color_card_inv
};

int dublin(int a,int b){
  if((a*b)%2==0){
    return ((a*b)/2)-1;
  }else{
    return((a*b)/2)-2;
  }
}

void printpos(pos p, int c, colors uncolor) {
  color_set(uncolor, NULL);
  mvaddch( p.x, p.y, c );
  mvaddch( p.x, p.y+1, c );
  mvaddch(p.x,p.y+2,c);
  mvaddch(p.x,p.y+3,c);
}

short color_from_RGB(char r, char g, char b) {
  return (r*36 + g*6 + b*1) + 16;
}

short grey_from_24(char g) {
  return 216 + g + 16;
}

void lisqua(int x,int lonx,int y,int lony){
  pos relleno;
  relleno.x= x;
  relleno.y=y;
  mvaddch(x,y, ACS_ULCORNER);
  mvaddch(x,y+lony, ACS_URCORNER);
  mvaddch(x+lonx,y, ACS_LLCORNER);
  mvaddch(x+lonx,y+lony, ACS_LRCORNER);
  for(int i = 1; i < lonx; i++){
    mvaddch(x+i,y, ACS_VLINE);
    mvaddch(x+i,y+lony,ACS_VLINE);
  }
  for(int j = 1; j<lony;j++){
    mvaddch(x, y+j ,ACS_HLINE);
    mvaddch(x+lonx ,y+j ,ACS_HLINE);
  }
  printpos(pos{relleno.x+1,relleno.y+1},' ', color_card);
  printpos(pos{relleno.x+2,relleno.y+1},' ' , color_card);
  printpos(pos{relleno.x+3,relleno.y+1},' ', color_card);

  color_set(color_card_inv,NULL);
}

int main(){

  std::random_device rd;

  bool f=true;
  bool g=true;
  pos oldcursor;
  int zurich=0;
  int kiev=0;
  // int cardiff=0; // <- changed, now it is called `totalpairs`
  int t=-1;
  int sofia=0;

  ttytype[0] = 35;  ttytype[1] = 45; // 35 to 45 lines height
  ttytype[2] = 80;  ttytype[3] = (unsigned char)130; // 80 to 130 characters width

  // Initializing window to print in
  initscr();   // starting screen
  cbreak();
  noecho();    // consume characters without showing them in screen
  curs_set(0); // setting cursor as invisible
  keypad(stdscr, true); // allowing ncurses to convert press keys into curses representation (useful for KEY_UP)
  start_color(); // asking ncurses to use colors

  init_pair(color_card,          grey_from_24(0), color_from_RGB(5,5,5));
  init_pair(color_card_inv,     grey_from_24(23), color_from_RGB(0,0,0));

  clear();
  pos card;
  mvaddstr(1,1, "Presione cualquier tecla");
  getch();
  clear();
  mvaddstr(1,1, "Seleccione la cantidad de filas y columnas con números del 2 al 9. ");
  mvaddstr(5,1,"Tenga en cuenta si ingresa otro caracter la grilla será muy grande ");
  addstr("y no cabrá en la pantalla.");
  mvaddstr(3,1,"Si selecciona el número 4, tendra una grilla de 16 cuadros y si selecciona 5 una de 25 cuadros.");

  card.x = getch() - 48;
          while (!(card.x>=2 && card.x<=10)==true){
            card.x = getch() - 48;
          }
  card.y=card.x;

  clear();

  int totalcards;
  // calculating total number of cards
  if( (card.x * card.y) % 2 == 0) {
    totalcards = card.x * card.y;
  } else {
    totalcards = card.x * card.y - 1;
  } //Se mira cuantas cartas deben haber en la grilla para que se formen bien las parejas

  int totalpairs = totalcards/2; //Se mira cuantas parejas habran en la grilla
  int cards[ totalcards ]; //un arreglo con el total de cartas en la grilla


  // defining and zeroing all cards
  int a [card.x][card.y];
  int duitama [card.x][card.y];
  for(int i=0;i<card.x;i++){
    for(int j=0;j<card.y;j++){
      a [i][j]=0;
      duitama[i][j]=0;
    }
  }

  // ---------------- putting cards randomly in board -------------------
  // creating deck of cards: {1, 1, 2, 2, 3, 3, 4, 4, 5, 5, ...}
  for (int i = 0; i < totalpairs; i++) {       // Escribe el numero del 1 al  N
    cards[2*i  ] = i+1;
    cards[2*i+1] = i+1;
  }

  // randomizing deck of cards // using this algorithm: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle
  for (int i = totalcards-1; i > 0; i--) { //Paso 1, reduce n para el paso 1, se repite para hacer un random total
    // position to swap with current last element (i)
    int pos = (unsigned int)rd() % i; //genera un numero aleatorio //Paso 1, elige un numero aleatorio entre los numeros que queden entre  1 y n
    // swaping elements
    int swap_temp = cards[pos];//Paso 1, elige un numero aleatorio entre los numeros que queden entre  1 y n
    cards[pos] = cards[i];//paso 2, cuenta de el numero mayor al menor, lo tacha y lo copia en otro arreglo
    cards[i] = swap_temp;//paso 3, arreglo randomizado //paso 2, cuenta de el numero mayor al menor, lo tacha y lo copia en otro arreglo
  }

  // copia del arreglo randomizado a la matriz a
  int i = 0;
  int j = 0;
  for(int k=0; k<totalcards; k++){
    a[i][j] = cards[k];
    j++;
    if(j % card.y == 0) {
      i++;
      j = 0;
    }
  }
  // -END------------ putting cards randomly in board -------------------

  int londres=0;
  int roma=0;

  while(f){//_________________________________________WHILE1_______________________________________________________________

    mvaddstr(1,1, "Turno del jugador");
    if(roma%2==0){
      mvaddch(1,19,'1');
    }else {
      mvaddch(1,19,'2');
    }
    roma++;
    mvaddstr(3,1, "Presione cualquier tecla para comenzar");
    getch();
    clear();

    pos cursor={4,7};
    londres=0;

    bool madrid=false;
    bool munich=false;
    int num_pressed_W = 0;

    while (f&&g){//___________________________________________WHILE2__________________________________________________________

      for (int i = 0 ; i < card.x ; i++){
        for (int j = 0; j < card.y; j++){
          mvaddch(4+ 5*i, 1, i +48);
          mvaddch(1, 6+ 5*j +j, j+48 );
          // print a rectangle unless there is an odd (impar) number of cards
          if( !(i==card.x-1 && j==card.y-1 && (card.x*card.y) % 2 != 0) ) {
            lisqua( 2+ 5*i, 4, 4+ 5*j +j, 5);
          }
        }
      }

      for(int i=0;i<card.x;i++){
        for(int j=0;j<card.y;j++){
          if(duitama[i][j]!=0){
            move((i*5)+4,(j*6)+7);
            printw("%d",duitama[i][j]);
          }
        }
      }

      int paris=-1;

      if(londres==1){
        paris=a[(oldcursor.x-4)/5][(oldcursor.y-7)/6];
        sofia=duitama[(oldcursor.x-4)/5][(oldcursor.y-7)/6];
        move(oldcursor.x,oldcursor.y);
        if (paris>0){
          printw("%d",paris);
        }else if(paris<=0){
          printw("%d",sofia);
        }
      }
      if(cursor.x<4){
        cursor.x=4;
        mvaddch(cursor.x,cursor.y, ' ' );
      }else if(cursor.y<7){
        cursor.y=7;
        mvaddch(cursor.x,cursor.y, ' ' );
      }else if( cursor.x>(5*card.x)){
        cursor.x=5*card.x -1;
        mvaddch(cursor.x,cursor.y, ' ' );
      }else if(cursor.y>6*card.y){
        cursor.y=6*card.y+1;
        mvaddch(cursor.x,cursor.y, ' ' );
      }else{
        mvaddch(cursor.x,cursor.y,' ');
      }

      int york=a[(cursor.x-4)/5][(cursor.y-7)/6];
      int bruselas=duitama[(cursor.x-4)/5][(cursor.y-7)/6];

      if(num_pressed_W==1 && madrid==true) {
        oldcursor.x=cursor.x;
        oldcursor.y=cursor.y;
      }

      if(madrid==true){
        move(cursor.x,cursor.y);
        if (york>0){
          printw("%d",york);
        }else if(york<=0){
          printw("%d",bruselas);
        }
        madrid=false;
        londres++;
        kiev++;
      }

      if (num_pressed_W==2 && paris == york && munich==true){
        if((oldcursor.x!=cursor.x)||(oldcursor.y!=cursor.y)){
          duitama[(cursor.x-4)/5][(cursor.y-7)/6]=york;
          duitama[(oldcursor.x-4)/5][(oldcursor.y-7)/6]=paris;
          t--;
          a[(cursor.x-4)/5][(cursor.y-7)/6]=t;
          t--;
          a[(oldcursor.x-4)/5][(oldcursor.y-7)/6]=t;
        zurich++;
        }
        munich=false;
      }

      mvaddstr(9,(6*card.y)+8,"Parejas de cartas encontradas: ");
      printw("%d",zurich);
      mvaddstr(7,(6*card.y)+8,"Cartas volteadas: ");
      printw("%d",kiev);

      mvaddstr(5,(6*card.y)+8,"Parejas en la grilla: ");
      printw("%d", totalpairs);

      if(zurich == totalpairs){
        mvaddstr(12,(6*card.y)+8,"FELICIDADES HAN GANADO ");
        mvaddstr(13,(6*card.y)+8,"Presionen Enter para salir ");
        f=false;
        getch();
      }

      if ((londres%2==0)&&(londres!=0)){
        g=false;
      }
    int k= getch();

      switch(k){
        case KEY_DOWN:  cursor.x+=5; break;
        case KEY_UP:    cursor.x-=5; break;
        case KEY_LEFT:  cursor.y-=6; break;
        case KEY_RIGHT: cursor.y+=6; break;
        case 'q':       f=false;     break;
        case 'w':
          madrid=true;
          munich=true;
          num_pressed_W++;
          break;
      }

      clear();
    }
    if(zurich == totalpairs){
      napms(100);
    }

    g=true;

  }

  clear();
  mvaddstr(1, 1, "Bye! :)");
  getch();

  endwin(); // closing window

  return 0;
}
